## -------------------------------------------------
## shcf_cli - central tool that does the creation
##            of quick shcf-based shell script
##
## INPUT: $1 - 'new'
##        $2 - project path + name
## OUTPUT:
## AUTHOR: Ismael Angelo A. Casimpan Jr.
##         ismael.angelo@casimpan.com
##
## TODO: Support command 'finalize' that would
##       make a script  standalone
## -------------------------------------------------
#!/bin/bash

## Ensure environment has been set:
[[ -z $SHCF_PLATFORM_ROOT ]] && { echo "[ERROR] SHCF environment not set. Run ./init_env.sh"; exit 1; }

## -------- source common library ---------
. $SHCF_PLATFORM_ROOT/etc/controller.bash.inc

## list of functions to auto-load
autoload_functions "create_bin case_shift create_lib create_namespace error_message get_rcfile"

## parameters
command=$1
project=$2
new_entity=$3

## ..............................
## main utility tool starts below
## ..............................
usage() {
  echo "$0 <cmd> [<cmd_params>]"
  echo " where:"
  echo "  * cmd        - command supported: 'new', 'lib'"
  echo "  * cmd_params - 'new' command accepts 'project_name'"
  echo
  exit $FAILED
} ## END: usage()

## supported commands:
##  new - to create a new shcf-based shell project
##  bin - creation of new 'bin' scripts
##  lib - creation of skeleton lib to a project
case $command in
  "new")
    ## Ban usage of 'shcf' in project name. Reserve for communicating with shcf tool
    [[ $(case_shift low $project | $GREP_BIN -c shcf) -gt 0 ]] && {
      error_message "ERROR: Reserved name 'shcf' cannot be used. Aborting.";
    }

    ## Ensure no conflicting namespace in $rc_file
    prj_namespace=$(create_namespace $project)
    rc_entry="${prj_namespace}=$(pwd)/$project"
    if [[ ! -e $rc_file ]]; then
       echo $rc_entry > $rc_file
    else
       prj_exist=$(grep -c ${prj_namespace} $rc_file)
       [[ $prj_exist -gt 0 ]] && { error_message "ERROR: Project $project exist. Aborting."; } || echo $rc_entry >> $rc_file
    fi

    template_rootdir=$SHCF_PLATFORM_ROOT/tpl/shcf_cli/$command

    mkdir -p $project
    cp -Rfp $template_rootdir/* $project
    initial_skeleton=$?

    new_entity=$($BASENAME_BIN $project)
    create_bin $project $new_entity
    if [[ $initial_skeleton -eq $SUCCESS ]] && [[ $? -eq $SUCCESS ]]; then
       echo "Successful creation of $project"
       . $rc_file      ## to refresh what is known to shcf without consulting $rc_file
    else
       error_message "Failure creating $project"
    fi
  ;;
  "lib")
    create_lib $project $new_entity
  ;;
  "bin")
    create_bin $project $new_entity
  ;;
  *)
    err_msg="ERROR: Unsupported command ($command)"
    [[ $# -eq 0 ]] && err_msg="ERROR: input parameter(s) missing!"
    echo $err_msg
    usage
   ;;
esac
